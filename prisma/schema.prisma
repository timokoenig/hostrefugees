datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  GUEST
  HOST
}

model User {
  id                      String        @id @default(uuid())
  createdAt               DateTime      @default(now()) @map("created_at")
  updatedAt               DateTime      @default(now()) @map("updated_at")
  firstname               String
  lastname                String
  email                   String        @unique
  password                String
  passwordResetAt         DateTime?     @map("password_reset_at")
  passwordResetHash       String?       @map("password_reset_hash")
  role                    UserRole      @default(GUEST)
  languages               String[]
  verified                Boolean       @default(false)
  verificationSubmittedAt DateTime?     @map("verification_submitted_at")
  photoUpdatedAt          DateTime?     @map("photo_updated_at")
  places                  Place[]
  requests                Request[]
  safetyChecks            SafetyCheck[]
  posts                   Post[]
}

enum PlaceType {
  PLACE
  PRIVATE
  SHARED
}

enum BathroomType {
  YES
  NO
  SHARED
}

model Place {
  id                             String       @id @default(uuid())
  createdAt                      DateTime     @default(now()) @map("created_at")
  updatedAt                      DateTime     @default(now()) @map("updated_at")
  author                         User         @relation(fields: [userId], references: [id])
  approved                       Boolean
  active                         Boolean
  title                          String
  titleTranslation               Json?        @map("title_translation")
  description                    String
  descriptionTranslation         Json?        @map("description_translation")
  type                           PlaceType
  placeAdults                    Int          @default(0) @map("place_adults")
  placeChildren                  Int          @default(0) @map("place_children")
  placeAdultWomen                Boolean      @default(false) @map("place_adult_women")
  placeAdultMen                  Boolean      @default(false) @map("place_adult_men")
  rooms                          Int
  beds                           Int
  bathroom                       BathroomType
  adults                         Int
  children                       Int
  pets                           Boolean      @default(false)
  addressStreet                  String       @map("address_street")
  addressHouseNumber             String       @map("address_house_number")
  addressZip                     String       @map("address_zip")
  addressCity                    String       @map("address_city")
  addressCityLat                 String?      @map("address_city_lat")
  addressCityLng                 String?      @map("address_city_lng")
  addressCountry                 String       @map("address_country")
  phoneNumber                    String       @default("") @map("phone_number")
  arrivalInstructions            String       @default("") @map("arrival_instructions")
  arrivalInstructionsTranslation Json?        @map("arrival_instructions_translation")
  houseRules                     String       @map("house_rules")
  houseRulesTranslation          Json?        @map("house_rules_translation")
  availabilityStart              DateTime     @map("availability_start")
  availabilityEnd                DateTime?    @map("availability_end")
  photos                         String[]
  userId                         String       @map("user_id")
  requests                       Request[]
}

enum RequestStatus {
  ACCEPTED
  DECLINED
  CANCELED
}

model Request {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @default(now()) @map("updated_at")
  author           User           @relation(fields: [userId], references: [id])
  place            Place          @relation(fields: [placeId], references: [id])
  adults           Int
  children         Int
  pets             Boolean        @default(false)
  startDate        DateTime       @map("start_date")
  endDate          DateTime?      @map("end_date")
  about            String
  aboutTranslation Json?          @map("about_translation")
  phoneNumber      String?        @map("phone_number")
  status           RequestStatus?
  userId           String         @map("user_id")
  placeId          String         @map("place_id")
  safetyChecks     SafetyCheck[]
}

model SafetyCheck {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [userId], references: [id])
  request   Request  @relation(fields: [requestId], references: [id])
  safe      Boolean
  userId    String   @map("user_id")
  requestId String   @map("request_id")
}

enum PostCategory {
  SPORT
  EDUCATION
  KIDS
  OUTDOOR
  HELP
  OTHER
}

model Post {
  id                     String         @id @default(uuid())
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @default(now()) @map("updated_at")
  author                 User?          @relation(fields: [userId], references: [id])
  approved               Boolean        @default(false)
  category               PostCategory[]
  title                  String
  titleTranslation       Json?          @map("title_translation")
  description            String
  descriptionTranslation Json?          @map("description_translation")
  website                String?
  phoneNumber            String?        @map("phone_number")
  addressStreet          String?        @map("address_street")
  addressHouseNumber     String?        @map("address_house_number")
  addressZip             String?        @map("address_zip")
  addressCity            String?        @map("address_city")
  addressCityLat         String?        @map("address_city_lat")
  addressCityLng         String?        @map("address_city_lng")
  addressCountry         String?        @map("address_country")
  userId                 String?        @map("user_id")
}
